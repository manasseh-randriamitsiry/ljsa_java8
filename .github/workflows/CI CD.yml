name: JavaFX CI/CD with Java 17 and EXE Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'      # Creates release when pushing a version tag (e.g., v1.0.0)
  pull_request:
    branches:
      - master
  workflow_dispatch:  # Allow manual run from GitHub Actions UI

jobs:
  build:
    runs-on: windows-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 123456789
          MYSQL_DATABASE: ljsa
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Java 17 (Temurin distribution)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Wait for MySQL to start
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL..."
          for /l %%i in (1,1,30) do (
            mysqladmin ping -h127.0.0.1 -uroot -p123456789 --silent && exit /b 0
            timeout /t 2 >nul
          )

      # 4️⃣ Import your SQL schema
      - name: Import database schema
        run: |
          choco install mysql -y
          "C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql.exe" -h127.0.0.1 -uroot -p123456789 ljsa < ljsa.sql

      # 5️⃣ Build your JavaFX app (Maven)
      - name: Build with Maven
        run: mvn -B clean package -DskipTests --file pom.xml

      # 6️⃣ Install Launch4j for EXE packaging
      - name: Install Launch4j
        run: choco install launch4j -y

      # 7️⃣ Package the .jar into a Windows .exe
      - name: Package JAR into EXE
        run: |
          mkdir dist
          launch4j ^
            --dont-wrapJar ^
            --outfile dist/ljsa.exe ^
            --jar target\*.jar ^
            --mainClass com.manasseh.ljsa.Main ^
            --chdir . ^
            --errTitle "LJSA Error" ^
            --supportUrl "https://github.com/${{ github.repository }}" ^
            --headerType gui

      # 8️⃣ Upload EXE as an artifact (available in the Actions UI)
      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: ljsa-exe
          path: dist/ljsa.exe

  release:
    runs-on: windows-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')  # Only run when a tag is pushed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built EXE
        uses: actions/download-artifact@v4
        with:
          name: ljsa-exe
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/ljsa.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
