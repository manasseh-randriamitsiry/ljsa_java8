name: JavaFX CI/CD with Java 17 and EXE Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  # üß± 1Ô∏è‚É£ Linux job: Build the JAR with SQLite
  build-jar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # No database service needed for SQLite

      - name: Build JAR with dependencies
        run: mvn -B clean package -DskipTests --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ljsa-jar
          path: target/*.jar

  # ü™ü 2Ô∏è‚É£ Windows job: Create EXE and release it
  package-exe:
    runs-on: windows-latest
    needs: build-jar

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ljsa-jar
          path: target

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: List downloaded files
        shell: cmd
        run: |
          dir target

      - name: Create EXE wrapper
        shell: cmd
        run: |
          echo Creating batch file...
          echo @echo off > ljsa.bat
          echo java -jar "%%~dp0ljsa.jar" %%* >> ljsa.bat
          
          echo Creating SED file...
          echo [Version] > ljsa.sed
          echo Class=IEXPRESS >> ljsa.sed
          echo SEDVersion=3 >> ljsa.sed
          echo [Options] >> ljsa.sed
          echo PackagePurpose=InstallApp >> ljsa.sed
          echo ShowInstallProgramWindow=0 >> ljsa.sed
          echo HideExtractAnimation=1 >> ljsa.sed
          echo UseLongFileName=1 >> ljsa.sed
          echo InsideCompressed=0 >> ljsa.sed
          echo CAB_FixedSize=0 >> ljsa.sed
          echo CAB_ResvCodeSigning=0 >> ljsa.sed
          echo RebootMode=N >> ljsa.sed
          echo InstallPrompt= >> ljsa.sed
          echo DisplayLicense= >> ljsa.sed
          echo FinishMessage= >> ljsa.sed
          echo TargetName=ljsa.exe >> ljsa.sed
          echo FriendlyName=LJSA Application >> ljsa.sed
          echo AppLaunched=cmd /c ljsa.bat >> ljsa.sed
          echo PostInstallCmd=^<None^> >> ljsa.sed
          echo AdminQuietInstCmd= >> ljsa.sed
          echo UserQuietInstCmd= >> ljsa.sed
          echo SourceFiles=SourceFiles >> ljsa.sed
          echo [Strings] >> ljsa.sed
          echo InstallPrompt= >> ljsa.sed
          echo DisplayLicense= >> ljsa.sed
          echo FinishMessage= >> ljsa.sed
          echo TargetName=ljsa.exe >> ljsa.sed
          echo FriendlyName=LJSA Application >> ljsa.sed
          echo AppLaunched=cmd /c ljsa.bat >> ljsa.sed
          echo PostInstallCmd=^<None^> >> ljsa.sed
          echo AdminQuietInstCmd= >> ljsa.sed
          echo UserQuietInstCmd= >> ljsa.sed
          
          echo Creating SourceFiles directory...
          mkdir SourceFiles
          copy target\*.jar SourceFiles\
          copy ljsa.bat SourceFiles\
          
          echo Running iexpress...
          iexpress /N /Q ljsa.sed
          
          echo Listing current directory...
          dir

      - name: Prepare distribution
        shell: cmd
        run: |
          mkdir dist
          if exist ljsa.exe (
            echo Found ljsa.exe, copying to dist...
            copy ljsa.exe dist\
          ) else (
            echo ljsa.exe not found!
            dir
          )
          copy target\*.jar dist\
          
          echo Contents of dist directory:
          dir dist

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: ljsa-exe
          path: dist

  # üöÄ 3Ô∏è‚É£ Release job: Publish GitHub release for version tags or manual dispatch
  release:
    runs-on: ubuntu-latest
    needs: package-exe
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download EXE artifact
        uses: actions/download-artifact@v4
        with:
          name: ljsa-exe
          path: dist

      - name: List files for release
        run: |
          echo "Files in dist directory:"
          ls -la dist/

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/ljsa.exe
            dist/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}